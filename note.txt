The only files to implement:
- libmfs.c
- server.c

Running & Testing

Running Tests:
make clean
make (make sure libmfs.so is filled (export LD_LIBRARY_PATH=.))
sh /home/cs537-1/tests/p4/p4-test/runtests.sh
To run all tests add -c at the end of the command

---------------------------------------------------------------------------------------
Server startup:
#1. Create a file system image: 

    Command: 
        gcc -o mkfs mkfs.c -Wall
        ./mkfs -f <image_file> [-d <num_data_blocks] [-i <num_inodes>]

    Description: 
        This runs mkfs.c to generate a on-disk file system image

#2. Run server:  
   
    Command: 
        server [portnum] [file-system-image]

    Description: 
        This creates a server using the file system image which acts as our disk

Client startup:
#3. Run client: 

    How:
        Call functions declared in libmfs.c in a main.c

    Description:
        Runs the client that communicates with the server.

ROOT DIRECTORY - BY DEFAULT HAS TYPE: 0 (MFS_DIRECTORY); SIZE: 64
				- Its direct[] holds {7, -1, -1 , -1, ....}
---------------------------------------------------------------------------------------
Structs:

typedef struct {
	inode_t inodes[UFS_BLOCK_SIZE / sizeof(inode_t)];
} inode_block;

    typedef struct {
        int type;   // MFS_DIRECTORY or MFS_REGULAR
        int size;   // bytes
        unsigned int direct[DIRECT_PTRS]; // direct pointer to the block number, 30 different blocks locations to point to per file/ directory
    } inode_t; // 128 bytes

typedef struct {
	dir_ent_t entries[128]; // 4096/ 128 = 32 bytes per directory entry
} dir_block_t;

    // Which is true, each directory entry is indeed 32 bytes
    typedef struct {
        char name[28];  // up to 28 bytes of name in directory (including \0)
        int  inum;      // inode number of entry (-1 means entry not used)
    } dir_ent_t;

typedef struct {
	unsigned int bits[UFS_BLOCK_SIZE / sizeof(unsigned int)];
} bitmap_t;

---------------------------------------------------------------------------------------
// Dec 12 - notes for me 5.12pm
Once we found inode_t, check if its a file or directory
If its a file - just traverse throught he direct pointer, and get the data literally according to offset and nbytes
If it is a directory - just traverse through the direct pointer, and get the directory block, cast it to directory entry block,
and access it accordingly.


lseek
char buf[SIZE]
fd = open("filename", O_RDWR)
read(fd, buf, SIZE); // it will read first SIZE char bytes into the buffer
lseek(fd, n, SEEK_CUR); // it will skip n items (including the last read item till SIZE)

- read is like a sliding window scan that moves to the next window of item








// Previously written run_lookup in server side

// Get the searched inode number
	int pinum = m->c_sent_inum;

	// INODE BITMAP
	// Gets inode bitmap's location
	char bufBlock[BLOCKSIZE];
	lseek(fd, SUPERBLOCKPTR->inode_bitmap_addr * BLOCKSIZE, SEEK_SET);
	read(fd, bufBlock, BLOCKSIZE);

	// Read inode bitmap AND get bit of inode
	unsigned int bitVal = get_bit((unsigned int*) bufBlock, pinum);

	// Check if inode is not found
	if(bitVal == 0)
		return -1;

	// INODE TABLE
	// Gets inode table's location
	lseek(fd, SUPERBLOCKPTR-> inode_region_addr * BLOCKSIZE, SEEK_SET);
	read(fd, bufBlock, BLOCKSIZE);

	// Read inode table block
	inode_block_t* inodeBlockPtr = (inode_block_t*) bufBlock; 
	
	// Read inode table and obtain inode
	inode_t inode = inodeBlockPtr->inodes[pinum];
	

	// DATA REGION
	// Iterate all potential 30 blocks where data is located
	for(int i = 0; i< DIRECT_PTRS; i++){
	
		// Gets data region direct data block index
		int directBlockNumber = inode.direct[i];

		// Gets directory entry block's location
		lseek(fd, directBlockNumber * BLOCKSIZE, SEEK_SET); // Does direct block number mean: directBlockNumber + SUPERBLOCKPTR->data_region_addr ??
		read(fd, bufBlock, BLOCKSIZE);
		
		// Read directory entry block
		dir_block_t* dirEntryBlockPtr = (dir_block_t*) bufBlock;
		
		// Read directory entry
		// Iterates all 128 directory entries in a directory entry block
		for(int j = 0; j< 128; j++){
			dir_ent_t dirEntry = dirEntryBlockPtr-> entries[j];
			if(strcmp(dirEntry.name, m->c_sent_name) == 0){
				m->c_received_inum = dirEntry.inum;
				return 0;
			}
		}
	}



	// INODE TABLE
	// Find parent inode
	int blockNumberOffsetInInodeTable = (pinum * sizeof(inode_t))/ BLOCKSIZE;
	char bufBlock2[BLOCKSIZE];
	lseek(fd, (SUPERBLOCKPTR->inode_region_addr + blockNumberOffsetInInodeTable) * BLOCKSIZE, SEEK_SET);
	read(fd, bufBlock2, BLOCKSIZE);

	inode_block_t* inodeBlockPtr = (inode_block_t*) bufBlock2;

	int remainingInodeOffset = pinum - (blockNumberOffsetInInodeTable * 128);

	inode_t pinode = inodeBlockPtr->inodes[remainingInodeOffset];


	--------------------------------------
int _Lookup(int pinum, char *name);
	1) Check the inode bitmap for the pinum passed in
	2) Check the inode table for the specified inode and retrieve the address
	3) Check that the inode type is a directory, if not return -1
	4) Call out to the offsetDirectory function to get access to the directory block ptr.
	5) Run through each directory block entry and compare the names, if name is found set message inum to the inum of that name
	6) If no name is found when searching the directory, return -1
int _Stat(int inum, MFS_Stat_t *m);
	1) Check the inode bitmap for the specified inode.
	2) Use that addr to find the inode within the inode table.
	3) Then use the size and type implications from MFS_STAT_T to set the messages received values correctly.
	4) Return 0 upon success and -1 on failure.

int _Write(int inum, char *buffer, int offset, int nbytes);
	1) Run checks for parameters to function (inum, offset, nbytes)
	2) Check inode bitmap 
	3) Check Inode Table for the actual inode
	4) Go to data region and add the offset to that address.
	5) Attempt to write the buffer to that address, if fail return -1

=========================================================
int _Read(int inum, char *buffer, int offset, int nbytes);
	// INODE BITMAP
		1) Check the inode bitmap if inum which is "read" exists by getting the bit at inum
	// INODE TABLE
		2) Go to inode_block_t
		3) Search for inode_t using inum as index
			Retrieve inode_t from inode table
	// DATA BITMAP
		4) Check if inum if is exists in bitmap. Proceed if it does exist, thus it is a valid read.
		
		5) Check file type:
		If it is a file, SHOW TA THE FUNCTION
			- CHECK THAT THE START OF YOUR OFFSET IS CORRECT
		If it is a directory, SHOW TA THE FUNCTION
			- CHECK THAT THE START OF YOUR OFFSET IS CORRECT
------------------

int _Creat(int pinum, int type, char *name);
	1) Check if inode bitmap for pinum is allocated
	2) Run a loop through inode bitmap block, and access each bit, and check if there are any bit = 0. 
		If there is, that will be our new inode number for creat.
		Assign the new bit found to 1, to signify that is will be used to create the new file/ dir
	3) Check if data bitmap for pinum is allocated. This concludes that parent inum exist in inode table, and data region.
	4) Retrieve the parent inode from inode table as inode_t
	5) Retrieve the new unallocated inode from inode table as inode_t
	6) Use the parent inode's direct pointer to blocks and retrieve the dir_block_t.
	7) Run a loop for 128 entries in dir_ent_block and check each dir_ent_t. 
	8) If there exists a dir_ent_t with inum == -1, allocate the newly found, unallocated inum to the dir_ent_t.
	9) And then assign the name for the file/ dir that is creat to the new dir_ent_t.
=========================================================

int _Unlink(int pinum, char *name);
	1) Check if inode bitmap for the pinum is allocated
	2) Check that the Inode table contains that specified inode.
	3) Go to the inode if found in the table and search for the name that is passed through the message struct.
	4) If we find the name, check the type of the inode.
	5) If it is a DIRECTORY, check if it is empty. If NOT EMPTY, return -1.
	6) If the directory is empty or if the name is a Regular file, we can Proceed
	7) Remove the specified file/directory from the inode table and set the inuse struct to -1
	
int _Shutdown();








Run_cret


		// Find an empty block in data region // HOW DO YOU FIND EMPTY DATA REGION? DO YOU ITERATE THROUGH DATA BITMAP FIRST?
		int blockNumberOfEmptyDataRegion = 0;
		for(int z = 0; z< SUPERBLOCKPTR->num_data; z++){

			// DATA BITMAP for child
			unsigned int bitVal = get_bit((unsigned int*)bufBlockDataBitMap, z);
			if(bitVal == 0){
				blockNumberOfEmptyDataRegion = z; // THIS MIGHT BE WRONG IF EACH BIT REPRESENTS 32 BYTES OF each dir_ent_t
				bitVal = 1;
				break;
			}
		}

		// DATA BLOCK with directory ENTRY for child
		char bufBlockEmptyDataRegion[BLOCKSIZE];
		lseek(fd, blockNumberOfEmptyDataRegion * BLOCKSIZE, SEEK_SET);
		read(fd, bufBlockEmptyDataRegion, BLOCKSIZE);

		dir_block_t* dirBlockEmptyDataRegionPtr = (dir_block_t*) bufBlockEmptyDataRegion;

		
		printf("%p\n", dirBlockEmptyDataRegionPtr);

		// Propogate data block for child with parent direcotry ptr and grandparent directory ptr
		// Find current name, given current inum
		dirBlockEmptyDataRegionPtr->entries[0].inum = newlyCreatedInodeNum;	
		strcpy(dirBlockEmptyDataRegionPtr->entries[0].name, name);

		// Find parent name, and parent inum
		dirBlockEmptyDataRegionPtr->entries[1].inum = pinum;


		// INODE IN INODE TABLE
		newInode.direct[0] = blockNumberOfEmptyDataRegion;

		// Checks pinode's direct[] array. If the newly found block in data region is NEW, then append the new block number
		// into direct[].


TESTS: 8/19
1. Test build (PASSING)
	)build with make
2. Test Shutdown (PASSING)
	)init, shutdown
3. Test create (PASSING) ???
	)init, creat, lookup, shutdown
4. Test write (FAILED)
	)init, creat, lookup, write, read, shutdown
5. Test stat (FAILED)
	)init, creat, lookup, stat, write, stat, shutdown
6. Test overwrite (FAILED)
	)init, creat, lookup, write, write, shutdown
7. Test maxfile (FAILED)
	)init, create, lookup, write, read, shutdown
8. Test maxfile2 (FAILED)
	)init, create, lookup, write, readm shutdown
9. Test dir1 (PASSING)
	)init, lookup, shutdown
10. Test dir2 (PASSING)
	)init, creat, lookup x 3, shutdown
11. Test baddir (FAILED)
	)init, creat, lookup, creat, shutdown
12. Test baddir2 (FAILED)
	)init, creat, lookup, lookup, shutdown
13. Test Unlink (FAILED)
	)init, creat, lookup, unlink, lookup, shutdown
14. Test unlink2 (FAILED)
	)init, creat, lookup, unlink, lookup, shutdown
15. Test empty	(FAILED)
	)init, creat, lookup, unlink, shutdown
16. Test name	(PASSING)
	)init, creat, shutdown
17. Test Persist (FAILED)
	)init, creat, write, lookup, shutdown
18. Test bigdir (PASSING)
	)init, create, look, creat, lookup, shutdown
19. Test Deep (PASSING)
	)init, creat, lookup, creat, lookup x 2, shutdown

NEW Test Location:
sh /home/cs537-1/tests/p4/p4-test-12.11/runtests.sh -c


PIAZZA POSTS for Persist Tests:
1978
1970
1949